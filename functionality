# system wide userland
### oneshot

[[ -w $PWD/functionality ]] && {
  echo "oneshot"
  sed -i '/\x23\x23\x23 oneshot/,/\x23\x23\x23/d' $PWD/functionality
}

###

function reload.functionality()
{
  [[ -f /etc/functionality ]] && source /etc/functionality
}

# -----------------------------------------------------
## text
# -----------------------------------------------------

function text.row.hl()
{
  [[ ! -f ${1} ]] && return 1
  local color="\e[01;30m"
  [[ ${2} ]] && case ${2} in
    red) color="\e[01;31m";;
    green) color="\e[01;32m";;
    yellow) color="\e[01;33m";;
    blue) color="\e[01;34m";;
    purple) color="\e[01;35m";;
    cyan) color="\e[01;36m";;
  esac
  
  local IFS=$'\n'
  local c=0
  for i in $(cat ${1}); do
    [[ ${c} -eq 0 ]] && { echo $i; c=1; } || { echo -en $color; echo -n $i; echo -en "\e[00m"; echo ""; c=0; };
  done
}

# -----------------------------------------------------
## file
# -----------------------------------------------------

function find.file()
{
  [[ -d ${1} && ${2} ]] || { echo "usage: find.file <path> <name>"; return 1; }
  find ${1} -type f -name ${2}
}


function find.dir()
{
  [[ -d ${1} && ${2} ]] || { echo "usage: find.dir <path> <name>"; return 1; }
  find ${1} -type d -name ${2}
}


function find.link()
{
  [[ -d ${1} && ${2} ]] || { echo "usage: find.link <path> <name>"; return 1; }
  find ${1} -type l -name ${2}
}


function file.inventory()
{
  [[ -d ${1} ]] || { echo "usage: find.inventory <path>"; return 1; }
  local fname="$USER.inventory-$(date "+%d-%m-%Y-%H%M%S").list"
  echo "# PATH=$PWD/${1}" > ~/${fname}
  find ${1} -type f -o -type l >> ~/${fname}
  case $- in *i*) ls -alsh ~/${fname};; esac
}


function dir.inventory()
{
  [[ -d ${1} ]] || { echo "usage: find.inventory <path>"; return 1; }
  local fname="$USER.inventory-$(date "+%d-%m-%Y-%H%M%S").list"
  echo "# PATH=$PWD/${1}" > ~/${fname}
  find ${1} -type d -o -type l >> ~/${fname}
  case $- in *i*) ls -alsh ~/${fname};; esac
}


function file.backup()
{
  [[ -d ${1} ]] || { echo "usage: backup.xz <path>"; return 1; }
  local fname=$(date "+%d-%m-%Y-%H%M%S").tar.xz
  case $- in *i*) echo "Archiving ${1}";; esac
  cd ${1} && tar cpJf /tmp/${fname} .
}


function file.integrity()
{
  local tmpfile="/tmp/lst.md5sum"
  [[ -d ${1} ]] && {
    find ${1} -type f -exec md5sum {} \; > ${tmpfile}
    [[ $? -eq 0 ]] && { mv ${tmpfile} ${1}/.lst.md5sum; } ||
    echo "something went wrong while writing ${tmpfile}";
    return 0;
  }
  [[ ${1} = 'check' ]] && {
    [[ -d ${2} ]] && { md5sum -w --quiet -c ${2}/.lst.md5sum; }
    return 0
  }
  case $- in *i*) echo -e "usage:\n\tfile.integrity <path>\n\tfile.integrity check <path>";; esac
}


# ---------------------------------------------------
## network
# ---------------------------------------------------

# because in strainer it's free to leak
[[ -x /bin/ss ]] && {
  alias ss.ssh='ss -o state established "( dport = :ssh or sport = :ssh )"'
  alias ss.tcp='ss -t -a'
  alias ss.udp='ss -u -a'
}

# ---------------------------------------------------
## environ candles
# ---------------------------------------------------
function env()
{
  function proceed()
  {
    local IFS=$'\n'
    for i in $(/usr/bin/env $@); do
      echo -n "${i%%=*}=" && echo -en "\e[01;30m" && echo -n "${i#*=}" && echo -e "\e[00m";
    done
  }
  case $- in *i*) proceed $@;; *) /usr/bin/env $@;;esac
}


function env.gcc.unset()
{
  [[ ${CFLAGS} ]] && unset CFLAGS CPPFLAGS MAKEFLAGS
  case $- in *i*) echo "CFLAGS CPPFLAGS MAKEFLAGS unset.";; esac
}


function env.gcc.set()
{
  # optimisation given by -O flag
  # coding standard given by -std flag
  # preprocessing error flags
  # cpu option flags
  # all of this shall be used on purpose.
  local march="x86-64"
  local mtune="native"
  [[ ${1} ]] && march=${1}
  [[ ${2} ]] && mtune=${2}
  CFLAGS="-march=$march -mtune=$mtune -fdiagnostics-color=always -pipe"
  CPPFLAGS=${CFLAGS}
  MAKEFLAGS=-j$(($(nproc)+1))
  export CFLAGS CPPFLAGS MAKEFLAGS
  case $- in *i*) echo $CFLAGS;; esac
}


# root access
if [[ $EUID -eq 0 ]]; then

  [[ -x /usr/bin/vim ]] && {
    [[ -f /etc/functionality ]] && \
      alias config.functionality="vim /etc/functionality"
    [[ -f /etc/ssh/sshd_config ]] && \
      alias config.sshd='vim /etc/sshd/sshd_config'
    [[ -f /etc/ssh/ssh_config ]] && \
      alias config.ssh='vim /etc/sshd/ssh_config'
    [[ -f /etc/ssl/openssl.cnf ]] && \
      alias config.ssl='vim /etc/ssl/openssl.cnf'
  }

  function hello.world()
  {
    echo "Hello, world."
  }

fi

